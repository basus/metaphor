program ::= {pattern}, generator ;

pattern ::= 'pattern',  identifier, { 'is', identifier}, ':',
	    pattern-def,
	    'end pattern';

pattern-def ::= axiom, {statement}

statement ::= production | definition | deferment

axiom ::= 'Axiom', nonterm, {iden-list};

production ::= 'Production', (param-nonterm | nonterm), 
	       '=>', (nonterm | term), {list};

param-nonterm ::= nonterm, '[', param,']'; 

list ::=  '+', (nonterm | term);

definition ::= 'Define', (nonterm | term) '=>', [ref], (nonterm | term);

deferment ::= 'Defer', (nonterm | term);

nonterm ::= identifier;

term ::= '@', identifier;

