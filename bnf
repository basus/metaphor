grammar ::= "grammar", ws, name, {component};
component ::= axiom | production | map | assign;

axiom ::= "Axiom", ws, name;
production :: = "Production", name, ws, [param], ws, [prob], ws, [cond], ws, "=>", ws, name_expr_list;
map ::= "Map", ws, name, ws, [param], ws, "=>", ws, {call};
assign ::= "Assign", ws, name, ws, number

param ::= "(", ws, namelist, ")";
prob ::= "[", ws, (name|number), ws  "]";
cond ::= "{", ws, expr, comparator, ws, expr, "}";
name_expr_list ::= {name, [exprlist]}
call ::= name, ["(",exprlist,")" ]
