* Introduction
** What is Metaphor?
   Metaphor is meant to be a tool to explore generative formal grammars and the patterns they create. It is designed to allow scientists and artists to use computers to explore the patterns they see in their daily work without having to resort to learning extensive programming. However it requires an ability to think clearly and logically and (like any scientific endeavor) some amount of patience.
   Metaphor is:
    - A simplified language for describing patterns as `formal grammars'.
    - An engine to automatically generate strings based on those grammars.
    - A set of contexts in which to render the strings as graphics (or sound).

** What Metaphor isn't.
   Metaphor is not:
    - A general purpose progamming language/environment.
    - A graphics editing programming (a la Photoshop, the GIMP).
    - 

** What is this document?
   This document is a basic introduction to the Metaphor system. It is designed to give users a basic understanding of the ideas behind Metaphor and some suggestions for how to use the sytem. 
   If you are a developer wanting to extend Metaphor for whatever reason please see the separate developer documentation as well.
   Enjoy.

* Background Information
** Grammars, strings and contexts
   People use languages to communicate. In general people use a general-purpose language (English, Chinese, Spanish, Klingon etc.). But there are also special-purpose languages (chemical reactions, programming languages). Languages require a set of symbols (an alphabet) and a group of rules which specify how the symbols may be combined (a grammar). Additionally these symbols and their combinations may have meanings attached to them. 
   Combinations of symbols are called strings. A grammar is mainly a group of rules for transforming these strings. A grammar can be used to check if a particular string is valid according to some language. However grammars can also create strings. Starting with some initial symbols and then applying the transformation rules of a grammar you can build the set of the strings that are part of the language. Not all symbols need have transformations associated with them and a symbol might have more than one transformation rule associated with it.
   The study of these languages and grammars are important subjects in mathematics, computer science and linguistics. However generative grammars can be used to produce interesting patterns and can be used to model organic growth, which in turn can be applied to lots of different areas.
   The purpose of Metaphor is to allow users to use Grammars to study patterns. It would help if it was easy to see the patterns themselves. In Metaphor the strings created as a result of applying grammars to symbols is `rendered' by a context. The symbols are considered to be instructions to do something: draw a line, change a color, stick two images together. This means that a user can specify a grammar using their own symbols, connect the symbols to visible actions and then view the results of the string generation as an intuitive image. This makes it easy for non-computer scientists to leverage the power of formal grammars to explore patterns in nature and beyond.

** Some terminology
   The following is a list of terms and definitions that will be used a lot later on:
    - Grammar: A grammar consists of a starting symbol(s), a set of rules governing symbol transformation and mappings between symbols and context representation. Additionally if the grammar is parameterized, values of the patterns may be specified
    - Axiom: An Axiom is the starting symbol(s) which is used as a base for string generation.
    - Production: A transformation rule connecting a symbol to a group of symbols into which it will be transformed.
    - Context: The strings generated by grammar need to be turned into images which are more intuitively understood. Contexts perform this tranformations. The act of transforming a string into an image is called `rendering'.
    - Mapping: Metaphor lets you use whatever symbols you want, but to render strings, the symbols must correspond to some valid Context commands. A mapping connects a single symbol to one or more Context commands.

** Some more technical information
   A grammar is a set of strings over an alphabet. It defines which strings are actually valid for the given language. These grammars are composed of a set of transformation rules: one symbol (or a set of symbols) is transformed into another set of symbols. The Metaphor system currently supports regular and context-free grammars only: a single symbol may be transformed into single or a set of symbols (Type 2 and Type 3 Chomsky Grammars). See [[http://en.wikipedia.org/wiki/Formal_grammar][Formal Grammars]] and [[http://en.wikipedia.org/wiki/Chomsky_hierarchy][Chomsky Hierarchy]] for more information. These grammars may be stochastic: each symbol may have more than one tranformation associated with it, and which transformation is actually used is determined by a parameter which specifies the probability of that production being used. See [[http://en.wikipedia.org/wiki/Stochastic_context-free_grammar][Stochastic Context Free Grammars]]. Future versions of Metaphor will allow for parametric grammars and perhaps basic context-sensitive grammars.

* Using Metaphor
** Requirements
   Metaphor is written using a number of freely available software tools. You will need to install these before you can use Metaphor.
    - The Python programming language v2.5 or higher
    - The Python Image Library v1.16
    - For Windows and Linux: The Qt graphics toolkit and the PyQt interface

** Running Metaphor
   
* The Shell
  shell.py is a script that implements a simple shell interface to Metaphor functionality. The following commands are supported:
  - compile <filename>
    Supply the name of a file containing Grammars. Metaphor will compile the file and make the defined grammars available to the user.
  - generate <grammar name> #generations
    Supply the name of the grammar and the number of generations to run and a compliant string will be created, displayed and saved to a stack for later use.
  - usecontext <name>
    Give the name of a context to be used in creating the final output. Currently a simple Turtle graphics context is available. Contexts must be placed in the contexts folder
  - interpretlast <filename>
    This will interpret the last created string in the given context and save it with the given filename.

* Examples
  See the lsys.gr example for a set of sample Grammars and the pics folder for their results. 
  The FractalPlant hasn't been created because the context doesn't have those features yet.

* Short Term Improvements
  - Add features to the Turtle context
  - Test probabilistic grammars
  - Fill out the built-in help system

* Long term Improvements
  - Add support for Parametric Grammars
  - Basic numeric operations
  - More interface options
    1. A GUI for non-CS users
    2. A batch mode to create multiple strings at a time
  - More contexts
  - ???? A way to combine grammars
