* Technical information
  Metaphor is written in Python making use of third party pure Python
  libraries. It has been tested with Python 2.6.

** Code organization
   The metaphor repository contains the following directories:
    - metaphor -- the source code for the Metaphor system
    - contexts -- a number of useful contexts
    - doc -- documentation for Metaphor
    - examples -- a number of systems and scripts to create images
    - test -- unit tests (incomplete as of v3.0)
    - metaphor.py -- the starter script

   The /metaphor directory contains the following subdirectory
    - core -- the code for the core system
    - lib -- third party libraries used by Metaphor
    - ui -- different user front-ends

** Contexts
   Contexts are Python classes that implement visualization (or other rendering)
   environments. Each context must have at least the following:
    - A .py file with the same name as the context
    - A class in the .py file with the same name as the file and context
    - A wrapup() method in the class

   When a context is loaded into Metaphor a new instance of the context class
   is created. No arguments are passed into the constructor. The string
   generated by the L-system is translated into method calls (with arguments) on
   the created context object. If the context object does not implement a
   particular method, the rendering is aborted. Once the string is finished
   Metaphor calls a wrapup() method on the object. It is suggested that the
   wrapup() method implement saving of the final output and any cleanup.
